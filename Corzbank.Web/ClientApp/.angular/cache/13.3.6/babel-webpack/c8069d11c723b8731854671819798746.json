{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\n\nfunction RegistrationComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Email is Required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegistrationComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password is Required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let RegistrationComponent = /*#__PURE__*/(() => {\n  class RegistrationComponent {\n    constructor(dialogRef, dialog) {\n      this.dialogRef = dialogRef;\n      this.dialog = dialog;\n    }\n\n    ngOnInit() {\n      this.registartionForm = new FormGroup({\n        'fullName': new FormControl('', [Validators.required, Validators.pattern]),\n        'email': new FormControl('', [Validators.required, Validators.pattern('([a-zA-Z0-9_.-]+)@([a-zA-Z]+)([\\.])([a-zA-Z]+)')]),\n        'phoneNumber': new FormControl('', [Validators.required, Validators.minLength(10), Validators.maxLength(13), Validators.pattern('[0-9]+')]),\n        'password': new FormControl('', [Validators.required, Validators.pattern('^(?=[^A-Z\\n]*[A-Z])(?=[^a-z\\n]*[a-z])(?=[^0-9\\n]*[0-9])(?=[^#?!@$%^&*\\n-]*[#?!@$%^&*-]).{6,}$')]),\n        'confirmPassword': new FormControl('', [Validators.required])\n      }, {\n        validators: this.passwordMatch('password', 'confirmPassword')\n      });\n    }\n\n    get fullName() {\n      return this.registartionForm.get('fullName');\n    }\n\n    get email() {\n      return this.registartionForm.get('email');\n    }\n\n    get phoneNumber() {\n      return this.registartionForm.get('phoneNumber');\n    }\n\n    get password() {\n      return this.registartionForm.get('password');\n    }\n\n    get confirmPassword() {\n      return this.registartionForm.get('confirmPassword');\n    }\n\n    passwordMatch(controlName, checkControlName) {\n      return controls => {\n        var _a;\n\n        const control = controls.get(controlName);\n        const checkControl = controls.get(checkControlName);\n\n        if ((checkControl === null || checkControl === void 0 ? void 0 : checkControl.errors) && !checkControl.errors['matching']) {\n          return null;\n        }\n\n        if ((control === null || control === void 0 ? void 0 : control.value) !== (checkControl === null || checkControl === void 0 ? void 0 : checkControl.value)) {\n          (_a = controls.get(checkControlName)) === null || _a === void 0 ? void 0 : _a.setErrors({\n            matching: true\n          });\n          return {\n            matching: true\n          };\n        } else {\n          return null;\n        }\n      };\n    }\n\n    closeWindow() {\n      this.dialogRef.close();\n    }\n\n  }\n\n  RegistrationComponent.ɵfac = function RegistrationComponent_Factory(t) {\n    return new (t || RegistrationComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i1.MatDialog));\n  };\n\n  RegistrationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegistrationComponent,\n    selectors: [[\"app-registration\"]],\n    decls: 22,\n    vars: 4,\n    consts: [[1, \"registration\"], [1, \"close-button\"], [3, \"click\"], [1, \"title\"], [3, \"formGroup\"], [1, \"field\"], [1, \"field-input\"], [1, \"fas\", \"fa-user\"], [\"formControlName\", \"email\", \"placeholder\", \"Email\", 1, \"email\"], [4, \"ngIf\"], [1, \"fas\", \"fa-lock\"], [\"formControlName\", \"password\", \"type\", \"password\", \"placeholder\", \"Password\", 1, \"password\"], [1, \"auth-buttons\"], [1, \"sign-in\", 3, \"disabled\"], [1, \"sign-up\", 3, \"click\"]],\n    template: function RegistrationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function RegistrationComponent_Template_button_click_2_listener() {\n          return ctx.closeWindow();\n        });\n        i0.ɵɵtext(3, \"x\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"h3\", 3);\n        i0.ɵɵtext(5, \"Sign up\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"form\", 4)(7, \"div\", 5)(8, \"div\", 6);\n        i0.ɵɵelement(9, \"i\", 7)(10, \"input\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, RegistrationComponent_span_11_Template, 2, 0, \"span\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 5)(13, \"div\", 6);\n        i0.ɵɵelement(14, \"i\", 10)(15, \"input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(16, RegistrationComponent_span_16_Template, 2, 0, \"span\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"div\", 12)(18, \"button\", 13);\n        i0.ɵɵtext(19, \"Sign in\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function RegistrationComponent_Template_button_click_20_listener() {\n          return ctx.createAccount();\n        });\n        i0.ɵɵtext(21, \"Create Account\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.registartionForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.email && ctx.email.invalid && ctx.email.touched);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.password && ctx.password.invalid && ctx.password.touched);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.registartionForm.invalid);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i3.NgIf],\n    styles: [\"*[_ngcontent-%COMP%]{margin:0;padding:0;box-sizing:border-box}.registration[_ngcontent-%COMP%]{background-color:#2b273d;height:590px;width:470px}.close-button[_ngcontent-%COMP%]{color:#767676;font-size:42px;display:flex;justify-content:end;padding:10px}.close-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background:transparent;border:none;outline:none;color:#767676}.title[_ngcontent-%COMP%]{color:#a1a1a1;font-size:35px;padding:40px 0}.field[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin-top:10px;height:70px;align-items:center;width:280px}.field-input[_ngcontent-%COMP%]{color:#fff;letter-spacing:1px;height:40px;display:flex;align-items:center;background-color:transparent;border:2px solid #65D5B3;padding:5px 10px;width:100%}.field-input[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{outline:none;border:none;width:100%;height:100%;background:transparent;padding:0 10px;color:#fff}form[_ngcontent-%COMP%], .auth-buttons[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;margin-top:15px}.sign-in[_ngcontent-%COMP%]{width:160px;height:40px;border:none;border-radius:20px;background:#65D5B3;font-size:20px;font-weight:500}.sign-up[_ngcontent-%COMP%]{width:160px;height:40px;border-radius:20px;border:2px solid #65D5B3;background:transparent;font-size:17px;color:#fff}button[_ngcontent-%COMP%]{margin:10px 0}span[_ngcontent-%COMP%]{margin:5px 0;color:red;font-size:16px;display:flex;align-self:start}.forgot-password[_ngcontent-%COMP%]{color:#787171;display:flex;width:280px;margin:0;font-size:14px;justify-content:flex-end;cursor:pointer}\"]\n  });\n  return RegistrationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}