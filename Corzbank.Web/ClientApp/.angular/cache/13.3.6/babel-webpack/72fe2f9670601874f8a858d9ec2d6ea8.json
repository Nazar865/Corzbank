{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\nlet RegistrationComponent = class RegistrationComponent {\n  constructor(dialogRef, dialog) {\n    this.dialogRef = dialogRef;\n    this.dialog = dialog;\n  }\n\n  ngOnInit() {\n    this.registartionForm = new FormGroup({\n      'userName': new FormControl('', [Validators.required, Validators.pattern(\"^([a-zA-Z]{2,}\\\\s[a-zA-Z]{1,}'?-?[a-zA-Z]{2,}\\\\s?([a-zA-Z]{1,})?)\")]),\n      'email': new FormControl('', [Validators.required, Validators.pattern('([a-zA-Z0-9_.-]+)@([a-zA-Z]+)([\\.])([a-zA-Z]+)')]),\n      'phoneNumber': new FormControl('', [Validators.required, Validators.minLength(10), Validators.maxLength(13), Validators.pattern('[0-9]+')]),\n      'password': new FormControl('', [Validators.required, Validators.pattern('^(?=[^A-Z\\n]*[A-Z])(?=[^a-z\\n]*[a-z])(?=[^0-9\\n]*[0-9])(?=[^#?!@$%^&*\\n-]*[#?!@$%^&*-]).{6,}$')]),\n      'confirmPassword': new FormControl('', [Validators.required])\n    }, {\n      validators: this.passwordMatch('password', 'confirmPassword')\n    });\n  }\n\n  get userName() {\n    return this.registartionForm.get('userName');\n  }\n\n  get email() {\n    return this.registartionForm.get('email');\n  }\n\n  get phoneNumber() {\n    return this.registartionForm.get('phoneNumber');\n  }\n\n  get password() {\n    return this.registartionForm.get('password');\n  }\n\n  get confirmPassword() {\n    return this.registartionForm.get('confirmPassword');\n  }\n\n  passwordMatch(controlName, checkControlName) {\n    return controls => {\n      var _a;\n\n      const control = controls.get(controlName);\n      const checkControl = controls.get(checkControlName);\n\n      if ((checkControl === null || checkControl === void 0 ? void 0 : checkControl.errors) && !checkControl.errors['matching']) {\n        return null;\n      }\n\n      if ((control === null || control === void 0 ? void 0 : control.value) !== (checkControl === null || checkControl === void 0 ? void 0 : checkControl.value)) {\n        (_a = controls.get(checkControlName)) === null || _a === void 0 ? void 0 : _a.setErrors({\n          matching: true\n        });\n        return {\n          matching: true\n        };\n      } else {\n        return null;\n      }\n    };\n  }\n\n  closeWindow() {\n    this.dialog.closeAll();\n  }\n\n  goBack() {\n    this.dialogRef.close();\n  }\n\n};\nRegistrationComponent = __decorate([Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n}), __metadata(\"design:paramtypes\", [MatDialogRef, MatDialog])], RegistrationComponent);\nexport { RegistrationComponent };","map":null,"metadata":{},"sourceType":"module"}